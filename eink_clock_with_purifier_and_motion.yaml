esphome:
  name: eink-sht-motion

substitutions:
  device_name: kitchen

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: !secret my_ap_password

wifi:
  ssid: !secret my_ap_ssid
  password: !secret my_ap_password
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "eink-sht-motion"
    password: "12345678"

time:
  - platform: homeassistant
    id: ha_time

i2c:
  sda: D2
  scl: D1
  scan: true

binary_sensor:
  - platform: status
    name: "${device_name} Status"
    id: system_status

  - platform: gpio
    id: motion
    pin: D6
    name: "${device_name} Motion"
    device_class: motion    
    filters:
      - delayed_off: 1s

sensor:
  - platform: wifi_signal
    id: wifisignal
    name: "${device_name} WiFi Signal"
    update_interval: 60s
      
  - platform: sht3xd
    address: 0x44  
    update_interval: 30s  
    temperature:
      name: "${device_name} Temperature"
      id: temp_data
      filters:
        - calibrate_polynomial:
            degree: 2
            datapoints:
              - 0.0 -> 0.0   
              - 34.6 -> 28.6 
              - 36.2 -> 29.6             

    humidity:
      name: "${device_name} Humidity"
      id: hum_data
      filters:
        - calibrate_polynomial:
            degree: 2
            datapoints:
              - 0.0 -> 0.0    
              - 50.2 -> 65
              - 55.5 -> 72



  - platform: homeassistant
    entity_id: sensor.water_purifier_pp_filter_level
    id: pp_filter

  - platform: homeassistant
    entity_id: sensor.water_purifier_ro_filter_level
    id: ro_filter

  - platform: homeassistant
    entity_id: sensor.water_purifier_input_water_tds
    id: tds_in

  - platform: homeassistant
    entity_id: sensor.water_purifier_output_water_tds
    id: tds_out

button:
  - platform: template
    name: '${device_name} Show Time Page'
    icon: 'mdi:update'
    on_press:
      then:
        - display.page.show: p1
        - component.update: my_display
    internal: false

  - platform: template
    name: '${device_name} Show Water Page'
    icon: 'mdi:update'
    on_press:
      then:
        - display.page.show: p2
        - component.update: my_display
    internal: false 

font:
  - file: "fonts/GothamRnd-Book.ttf"
    id: time_font
    size: 80
    glyphs: [0, 1, 2, 3, 4, 5, 6, 7 ,8, 9, ':']

  - file: "fonts/GothamRnd-Bold.ttf"
    id: temp_font
    size: 30
    glyphs: &font-glyphs    
      ['!', ',', '.', '"', '%', '-', '_', ':', '°', '/',
       '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ',
       'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
       'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 
       'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
       'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
       's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

  - file: "fonts/GothamRnd-Book.ttf"
    id: book_40
    size: 40
    glyphs: *font-glyphs 

  - file: "fonts/GothamRnd-Bold.ttf"
    id: bold_40
    size: 40
    glyphs: *font-glyphs 

  - file: "fonts/GothamRnd-Bold.ttf"
    id: bold_25
    size: 25
    glyphs: *font-glyphs 

  - file: "fonts/GothamRnd-Book.ttf"
    id: date_font
    size: 30
    glyphs: *font-glyphs   

  - file: "fonts/materialdesignicons-7296.ttf"
    id: icon_font
    size: 30
    glyphs: 
      - "\U000F058E" # mdi-water-percent
      - "\U000F050F" # mdi-thermometer

color:
  - id: color_black
    red: 0%
    green: 0%
    blue: 0%
    white: 50%
    
  - id: color_white
    red: 0%
    green: 0%
    blue: 0%
    white: 0%

spi:
  clk_pin: D5
  mosi_pin: D7

display:
  - platform: waveshare_epaper
    id: my_display
    cs_pin: D0 
    dc_pin: D8 
    model: 2.90in
    rotation: 270
    update_interval: 10s
    full_update_every: 30
    pages:
      - id: p1
        lambda: |-    
          //time
          it.strftime(75,1, id(time_font), TextAlign::TOP_CENTER, "%H",id(ha_time).now());
          
          it.printf(150,-6, id(time_font), TextAlign::TOP_CENTER, ":");
          
          it.strftime(225,1, id(time_font), TextAlign::TOP_CENTER, "%M",id(ha_time).now());
          
          it.strftime(150, 70, id(date_font), TextAlign::TOP_CENTER, "%Y/%m/%d %a", id(ha_time).now()); 
        
          //temp
          it.print(25, 97, id(icon_font),TextAlign::TOP_CENTER, "\U000F050F");
          if(id(temp_data).has_state()){
            it.printf(90,100, id(temp_font), TextAlign::TOP_CENTER, "%.1f°C", id(temp_data).state);
          }
          //hum
          it.print(185, 100, id(icon_font),TextAlign::TOP_CENTER, "\U000F058E");
          if(id(hum_data).has_state()){
            it.printf(240, 100, id(temp_font), TextAlign::TOP_CENTER, "%.1f%%", id(hum_data).state);
          }
      
      - id: p2
        lambda: |-
          it.printf(1,-1, id(book_40), TextAlign::TOP_LEFT, "PP:");
          it.printf(65,10, id(bold_25), TextAlign::TOP_LEFT, "Filter"); 
          it.printf(30,33, id(bold_40), TextAlign::TOP_LEFT, "%.0f%%",id(pp_filter).state);   
             
          it.printf(1,63, id(book_40), TextAlign::TOP_LEFT, "RO");
          it.printf(30,95, id(bold_40), TextAlign::TOP_LEFT, "%.0f%%",id(ro_filter).state);

          it.printf(160,-1, id(book_40), TextAlign::TOP_LEFT, "IN:");
          it.printf(215,10, id(bold_25), TextAlign::TOP_LEFT, "TDS");          
          it.printf(200,33, id(bold_40), TextAlign::TOP_LEFT, "%.0f",id(tds_in).state);

          it.printf(160,63, id(book_40), TextAlign::TOP_LEFT, "OUT:");   
          it.printf(200,95, id(bold_40), TextAlign::TOP_LEFT, "%.0f",id(tds_out).state);           
